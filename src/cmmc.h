/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.13 Fri Aug  8 15:03:13 2025.
 */

#ifndef SRC/CMMC_H
#define SRC/CMMC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SRC/CMMC_MSG1_FRAME_ID (0x20u)
#define SRC/CMMC_MSG2_FRAME_ID (0xffu)

/* Frame lengths in bytes. */
#define SRC/CMMC_MSG1_LENGTH (8u)
#define SRC/CMMC_MSG2_LENGTH (4u)

/* Extended or standard frame types. */
#define SRC/CMMC_MSG1_IS_EXTENDED (0)
#define SRC/CMMC_MSG2_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define SRC/CMMC_MSG1_NAME "MSG1"
#define SRC/CMMC_MSG2_NAME "MSG2"

/* Signal Names. */
#define SRC/CMMC_MSG1_SPEED_NAME "speed"
#define SRC/CMMC_MSG1_ACCELERATION_NAME "acceleration"
#define SRC/CMMC_MSG1_DISTANCE_NAME "distance"
#define SRC/CMMC_MSG1_STATUS_NAME "status"
#define SRC/CMMC_MSG2_SOMESIGNAL_NAME "somesignal"

/**
 * Signals in message MSG1.
 *
 * Example message 1
 *
 * All signal values are as on the CAN bus.
 */
struct src/cmmc_msg1_t {
    /**
     * Example 16 bit signal in message 1
     *
     * Range: 0..65535 (0..65.535 m/s)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t speed;

    /**
     * Example 32 bit signal in message 1
     *
     * Range: 0..4294967295 (0..4294.9673 m/s^2)
     * Scale: 1e-06
     * Offset: 0
     */
    uint32_t acceleration;

    /**
     * Example 8 bit signed signal in message 1
     *
     * Range: -128..128 (-128..128 mm)
     * Scale: 1
     * Offset: 0
     */
    int8_t distance;

    /**
     * Example 8 bit unsigned signal in message 1
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t status;
};

/**
 * Signals in message MSG2.
 *
 * Example message 2
 *
 * All signal values are as on the CAN bus.
 */
struct src/cmmc_msg2_t {
    /**
     * Range: 0..4294967295 (0..4294967295 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t somesignal;
};

/**
 * Pack message MSG1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int src/cmmc_msg1_pack(
    uint8_t *dst_p,
    const struct src/cmmc_msg1_t *src_p,
    size_t size);

/**
 * Unpack message MSG1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int src/cmmc_msg1_unpack(
    struct src/cmmc_msg1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MSG1.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int src/cmmc_msg1_init(struct src/cmmc_msg1_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t src/cmmc_msg1_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float src/cmmc_msg1_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool src/cmmc_msg1_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t src/cmmc_msg1_acceleration_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float src/cmmc_msg1_acceleration_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool src/cmmc_msg1_acceleration_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t src/cmmc_msg1_distance_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float src/cmmc_msg1_distance_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool src/cmmc_msg1_distance_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t src/cmmc_msg1_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float src/cmmc_msg1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool src/cmmc_msg1_status_is_in_range(uint8_t value);

/**
 * Pack message MSG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int src/cmmc_msg2_pack(
    uint8_t *dst_p,
    const struct src/cmmc_msg2_t *src_p,
    size_t size);

/**
 * Unpack message MSG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int src/cmmc_msg2_unpack(
    struct src/cmmc_msg2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from MSG2.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int src/cmmc_msg2_init(struct src/cmmc_msg2_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t src/cmmc_msg2_somesignal_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float src/cmmc_msg2_somesignal_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool src/cmmc_msg2_somesignal_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
