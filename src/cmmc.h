/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.13 Mon Aug 18 13:19:37 2025.
 */

#ifndef CMMC_H
#define CMMC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CMMC_TOF_FRAME_ID (0x3fu)
#define CMMC_SERVO_POSITION_FRAME_ID (0x40u)
#define CMMC_DUMMY_FRAME_ID (0x41u)

/* Frame lengths in bytes. */
#define CMMC_TOF_LENGTH (8u)
#define CMMC_SERVO_POSITION_LENGTH (8u)
#define CMMC_DUMMY_LENGTH (8u)

/* Extended or standard frame types. */
#define CMMC_TOF_IS_EXTENDED (0)
#define CMMC_SERVO_POSITION_IS_EXTENDED (0)
#define CMMC_DUMMY_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define CMMC_TOF_NAME "TOF"
#define CMMC_SERVO_POSITION_NAME "SERVO_POSITION"
#define CMMC_DUMMY_NAME "DUMMY"

/* Signal Names. */
#define CMMC_TOF_RANGE_MM_NAME "RANGE_MM"
#define CMMC_TOF_SIGNAL_RATE_MCPS_NAME "SIGNAL_RATE_MCPS"
#define CMMC_TOF_ERROR_STATUS_NAME "ERROR_STATUS"
#define CMMC_TOF_RTN_AMBIENT_RATE_NAME "RTN_AMBIENT_RATE"
#define CMMC_TOF_RTN_RATE_NAME "RTN_RATE"
#define CMMC_SERVO_POSITION_SETPOINT_NAME "SETPOINT"
#define CMMC_SERVO_POSITION_ADC_RAW_NAME "ADC_RAW"
#define CMMC_SERVO_POSITION_ADC_VOLTAGE_NAME "ADC_VOLTAGE"
#define CMMC_DUMMY_DUMMY1_NAME "DUMMY1"
#define CMMC_DUMMY_DUMMY2_NAME "DUMMY2"
#define CMMC_DUMMY_DUMMYF_NAME "DUMMYF"

/**
 * Signals in message TOF.
 *
 * All signal values are as on the CAN bus.
 */
struct cmmc_tof_t {
    /**
     * Range: 0..255 (0..255 mm)
     * Scale: 1
     * Offset: 0
     */
    uint8_t range_mm;

    /**
     * Range: 0..1280 (0..10 MCPS)
     * Scale: 0.0078125
     * Offset: 0
     */
    uint16_t signal_rate_mcps;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t error_status;

    /**
     * Range: 0..65528 (0..8191 KCount per sec)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t rtn_ambient_rate;

    /**
     * Range: 0..65528 (0..8191 KCount per sec)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t rtn_rate;
};

/**
 * Signals in message SERVO_POSITION.
 *
 * All signal values are as on the CAN bus.
 */
struct cmmc_servo_position_t {
    /**
     * Range: 900..2100 (900..2100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t setpoint;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t adc_raw;

    /**
     * Range: 0..3300 (0..3.3 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t adc_voltage;
};

/**
 * Signals in message DUMMY.
 *
 * All signal values are as on the CAN bus.
 */
struct cmmc_dummy_t {
    /**
     * Range: 900..2100 (900..2100 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dummy1;

    /**
     * Range: 0..4095 (0..4095 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t dummy2;

    /**
     * Range: 0..3300 (0..3.3 V)
     * Scale: 0.001
     * Offset: 0
     */
    uint32_t dummyf;
};

/**
 * Pack message TOF.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cmmc_tof_pack(
    uint8_t *dst_p,
    const struct cmmc_tof_t *src_p,
    size_t size);

/**
 * Unpack message TOF.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cmmc_tof_unpack(
    struct cmmc_tof_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from TOF.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int cmmc_tof_init(struct cmmc_tof_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cmmc_tof_range_mm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_tof_range_mm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_tof_range_mm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_tof_signal_rate_mcps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_tof_signal_rate_mcps_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_tof_signal_rate_mcps_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t cmmc_tof_error_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_tof_error_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_tof_error_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_tof_rtn_ambient_rate_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_tof_rtn_ambient_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_tof_rtn_ambient_rate_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_tof_rtn_rate_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_tof_rtn_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_tof_rtn_rate_is_in_range(uint16_t value);

/**
 * Pack message SERVO_POSITION.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cmmc_servo_position_pack(
    uint8_t *dst_p,
    const struct cmmc_servo_position_t *src_p,
    size_t size);

/**
 * Unpack message SERVO_POSITION.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cmmc_servo_position_unpack(
    struct cmmc_servo_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from SERVO_POSITION.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int cmmc_servo_position_init(struct cmmc_servo_position_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_servo_position_setpoint_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_servo_position_setpoint_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_servo_position_setpoint_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_servo_position_adc_raw_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_servo_position_adc_raw_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_servo_position_adc_raw_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t cmmc_servo_position_adc_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_servo_position_adc_voltage_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_servo_position_adc_voltage_is_in_range(uint32_t value);

/**
 * Pack message DUMMY.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int cmmc_dummy_pack(
    uint8_t *dst_p,
    const struct cmmc_dummy_t *src_p,
    size_t size);

/**
 * Unpack message DUMMY.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int cmmc_dummy_unpack(
    struct cmmc_dummy_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DUMMY.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int cmmc_dummy_init(struct cmmc_dummy_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_dummy_dummy1_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_dummy_dummy1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_dummy_dummy1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t cmmc_dummy_dummy2_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_dummy_dummy2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_dummy_dummy2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t cmmc_dummy_dummyf_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float cmmc_dummy_dummyf_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool cmmc_dummy_dummyf_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
